THE BOX MODEL
Everything is CSS is a box, and those boxes have properties
Everything has a box around it, even if it's not visible
Inside the box is the Content
Surrounding the content is the Padding
Surrounding the padding is the Border

Content
    If you inspect an element in Chrome, the Content area is marked by blue

Width and Height
    By default the width/height CSS property sets the content area
    but if box-sizing is set to border-box, it sets the width of the border area
    Text by default will try to wrap to match the browser window size
    But you can set the width property to tell it to be a certain size.
        div {
            width: 200px;
        }
    These properties set the area of the box, but the text inside won't
        necessarily scrunch to fit inside that box.
    It will wrap where needed, but the font size isn't going to change.
    You can see the content area easily by setting a background-color.


BORDER
The border is the box around the element.
Outside of the content area and the padding.
The most important border properties are:
    border-width
    border-color
    border-style
The border width is additive...
    Meaning if you set the element width to 200px, and then the border-width
        to 5px, the total size of the element will be 210px...
        200px + 5px + 5px (border on either side)
However, if you set the box-sizing property to border-box, that will subtract
    the size of the element so the border fits into the specified element size.
    So then even with the border, it will be 200px by 200px.

For border-style, you can do two or more settings.
    border-style: solid dashed dotted inset;
In order, this sets the top, right, bottom, then left sides.
If you do just two settings, it sets the top and sides.
If you do three, it sets the top, bottom, and sides.

Then you can also do color, width, and style for each of the sides individually
    border-left-color: red;
    border-top-style: solid;
    border-bottom-color: blue;

You can also do the width, style, and color all at the same time.
    IN THAT ORDER
    border: 10px solid blue;
You can then set individual sides after that.
    border: 10px solid blue;
    border-left-width: 15px;

border-radius will let you do rounded corners.
You can do pixels, but using % will be a percent of the length of the border
So 10% will use 10% of the total height/width.
50% is how you do a circle

PADDING
Metaphor:
    If you're shipping something, the fragile item is the content,
        the border is the box you're fitting it in,
        and the padding is the packing material around the content.
In Chrome dev tools, the padding is marked green.
We have attributes:
    padding-top
    padding-bottom
    padding-left
    padding-right
But we also have shorthand:
    Apply to all 4 sides:
        padding: 10;
    Vertical / Horizontal:
        padding: 10px 20px;
    Top / Horizontal / Bottom:
        padding: 5px 10px 12px
    Top / Right / Bottom / Left:
        padding: 1px 2px 3px 4px

MARGIN
Like padding, except padding is on the inside of the element, meaning it
    pushes the border out further the bigger it is, and margin is on the
    outside, meaning space outside of the border will be pushed the bigger
    it is.
In Chrome dev tools, the margin is marked orange.
Other than that, basically the same idea with the same attributes and
    behavior.
Some tags have default margins. Like <body> has a default of 8px.
    People will usually remove that first thing in their CSS, so there isn't
    some mystery space.
"margin: 20px auto"
    The 'auto' will center the element inside its parent element.

DISPLAY PROPERTY (First encounter)
3 types:
    Inline
        Width & Height are ignored
        Margin & padding push elements away horizontally but not vertically
    Block
        Breaks the flow of a document
        Width, Height, Margin, & Padding are respected
    Inline-Block
        Behave like an inline element except Width, Height, Margin, Padding
            are respected.

CSS UNITS
Relative Units
%
    Percentages
        Always a percentage of some other value
        Sometimes it's a value from the parent.
        Others it's a value from the element itself.
        width: 50%;
            Half the width of the parent
        line-height: 50%;
            Half the font-size of the element itself
em
    With font-size, 1em equals the font-size of the parent.
    2em is twice the font size of the parent.
    With other properties 1em is equal to the computed font-size of the
        element itself.
    em is a good way to keep things in scale with one another. So you can
        make a button as part of a section. If you set its measurements
        in em, you can mess around with the size of the page as a whole
        and still have the button retain it's relative shape and size.
    For font-size, its size is relative to its direct parent. It stacks
        if there are multiple nests.
rem
    Like em but relative to the root html element's font size.
    This does not stack like ems do.