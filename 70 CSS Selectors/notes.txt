CSS SELECTORS
Universal selector
    Selects everything
    * {
        color: black;
    }
    This is not recommened. It will literally make EVERYTHING black, including things that can't be black.
        Images...
        Divs...
        Inputs...
        Buttons...
        etc
Element selector
    Selects all HTML elements of a certain type
    button {
        background-color: pink;
    }
Multiple element selector
    Same as before, but you can use a comma to select Multiple
    h1, h2 {
        text-decorator: underline;
    }

ID selector
    This is where you add an "id" attribute to an HTML element, 
        then you can select only it.
    <button id="sign_up">Sign Up</button>
    #sign_up {
        color: gray;
        background-color: green;
    }

Class selector
    Similar idea to an ID
    Except a class can be linked to multiple elements
    So it groups elements together.
    Doesn't all have to be the same element type.
        You can put the same class on a <span> and an <a> and it will style them both.
    <button class="test">Hi</button>
    .test {
        font-size: 16px;
    }

Descendant selector
    Selects all nested elements of the specified type.
    li a {
        color: blue;
    }
    The selection doesn't have to include everything in the nested code.
        e.g. footer > nav > ul > li > a
    You can just do the ones you need:
        e.g. footer a {
            color: blue;
        }

ADJACENT SELECTOR
h1 + p {
    color: blue;
}
This selects the element immediately after the first one.
So, a <p> tag that comes after an <h1>


DIRECT CHILD SELECTOR
Selects elements that are direct descendants of an element.
div > li {
    color: green;
}

ATTRIBUTE SELECTOR
Selects all elements where the attribute is set to specific thing
input[type="text"] {
    width: 20px;
    color: pink;
}
section[class="post"] {
    color: green;
}

Can use wildcards, so like
    a[href*="example"] {
        color: white;
    }
That will make it so all a hrefs that contain the word "example" will apply
Can use a dollar sign which means the href has to END in whatever
    a[href$=".com"] {
        color: black;
    }


PSEUDO CLASSES
Keyword added to a selector that specifies a special state of the
    selected element
Like
    If a checkbox has been checked
    Or if a link has been hovered over
    Or every other button
They all start with a colon
    :active
Examples
    a:hover {
        color: orange;
    }
    ^ that selects all a tags when they are being hovered over

    button:active {
        color: red;
    }
    ^ that selects all buttons that are currently being clicked

    input[type="checkbox"]:checked {
        margin-left: 25px;
        border: 1px solid blue;
    }
    ^ that selects all checkboxes that are checked
    ^ could also choose radio buttons by changing the type

    p:nth-of-type(2) {
        background-color: purple;
    }
    ^ selects element based on position in a sequence of elements
    ^ so the above would choose the 2nd <p> element in a series

    p:nth-of-type(2n) {
        background-color: purple;
    }
    ^ the 'n' chooses every second <p> element in a series.

    p:nth-of-last-type(2) {
        background-color: purple;
    }
    ^ Does the same as the first 'nth' example, except in reverse
    ^ So instead of choosing the 2nd element, it chooses the 2nd to last


PSEUDO ELEMENTS
Keyword added to a selector that lets you style a particular part
    of a selected element
So
    Stylize the first letter
    or first line
Usually uses two colons
    ::
But can use only one.

Examples
    p::first-letter {
        font-size: 50px;
    }
    ^ Takes the first letter of every <p> tag and makes it 50px

    p::first-line {
        color: gold;
    }
    ^ Takes the first line of every <p> and makes it gold

    p::selection {
        color: gold;
        background-color: red;
    }
    ^ changes the color/background of highlighted text
    ^ this only seems to work with colors
    ^ MDN says it works with other things, but I could only get it to
        change colors - nothing else.


THE CASCADE
The order you list the CSS is the order it will style elements
So if you have two h1's, the 1st one will apply, but the 2nd will overwrite.


WTF IS SPECIFICITY
How the browser decides which style to use when multiple rules could apply
    to the same elements.
It is a measure of how specific a selector is.
    The more specific seletor wins.

The way it works is the browser will see what is more specific
    p {
        color: yellow;
    }
vs
    section p {
        color: yellow;
    }
The 2nd one is more specific.
But more complicated than that...

ID > Class > Element
So an ID is the most specific and will beat out classes
And classes are pretty specific and will beat out elements
Elements are the least specific

Basically, the browser figures out a specificity score based on what it finds
The score has 3 digits
1st = IDs
2nd = Classes, attributes, and pseudo classes
3rd = Elements and pseudo elements
For each ID, it adds a 1 to the first digit
For each class, etc, it adds 1 to the 2nd digit
For each element, etc, it adds 1 to the 3rd digit.
So if you have a selector with 2 elements...
    the score will be 002
If you have a select with an ID...
    the score will be 100
If you have a selector with a class and an attribute, and 1 element...
    the score will be 021
The higher number wins.

The number NOT the same as decimal numbers though.
So if you do 12 elements, it's not going to equal 1 class and 2 elements
It will be more like 0 0 12


INLINE STYLES
These are more specific than IDs and classes
Not used by anyone but it is a way to do it
This is done by editing the HTML itself
    <button id="button" style="color:green">Login</button>

There is also an !important rule
You should not use this unless there is a specific case to.
This basically just sets a !important flag in a selector and
    forces the browser to use that style.
    h1 {
        color: green !important;
    }
    ^The h1(s) will be forced to show them as green.


CSS INHERITANCE
Any "nested" elements will inherit from the originating element.
For example
    <body>
        <h1>blah blah
        <h2> blhab blah
        <section>
            <p> blah blah
            <p> blah
        </section>
    </body>
    ^all of the other elements inherit from <body>
    So if you do something like this...
        body {
            color: purple;
        }
    All the text in the other elements will inherit the purple color from the body.
Not all elements inherit by default.
    Like input fields and buttons
And not ever attribute is inheritable to everything.
There is an "inherit" keyword that you can use, though.
    button {
        color: inherit;
    }